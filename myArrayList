import java.util.Arrays;

/**
 * @version September 18, 2023
 * @author Abdirahman, Liban, Ali, and Aidan
 */
public class myArraylist {
    /*
     * I, Abdirahman was the project manager and was responsible for creating 
     * this class. So I created the constructor and grow method.
     */
    
    /**
     * Initial capacity of the array.
     */
    private static final int INITIAL_CAPACITY = 50;
    
    /**
     * Number of elements the array holds.
     */
    private int size;
    
    /**
     * Array to hold Fraction objects.
     */
    private Fraction[] array;
    
    /**
     * Constructs an empty list with an initial capacity of fifty.
     */
    public myArraylist() {
        this.array = new Fraction[INITIAL_CAPACITY];
        this.size = 0;
    }

    /**
     * Ensures that the array grows if it is full.
     * The new size of the array will be 120% of its previous size.
     */
    private void grow() {
        if (size == array.length) {
            int newSize = (int)(array.length * 1.2);
            array = Arrays.copyOf(array, newSize);
        }
    }

    /**
     * Main method to execute the class.
     * @param args Command-line arguments. Not used.
     */
    public static void main(String[] args) {
        myArraylist list = new myArraylist();
        // Testing the add method
        list.add(0, new Fraction(1, 2));
        list.add(1, new Fraction(2, 3));
        list.add(2, new Fraction(3, 4));
        System.out.println("Added 1/2, 2/3, and 3/4 to the list.");

        // Testing the indexOf method
        System.out.println("Index of 1/2: " + list.indexOf(new Fraction(1, 2))); // Expected output: 0
        System.out.println("Index of 2/3: " + list.indexOf(new Fraction(2, 3))); // Expected output: 1
        System.out.println("Index of 3/4: " + list.indexOf(new Fraction(3, 4))); // Expected output: 2
        System.out.println("Index of 4/5: " + list.indexOf(new Fraction(4, 5))); // Expected output: -1, as 4/5 is not in the list.

        // Testing the remove method
        Fraction removedFraction = list.remove(1);
        System.out.println("Removed fraction at index 1: " + removedFraction); // Expected output: 2/3
        System.out.println("Index of 2/3 after removal: " + list.indexOf(new Fraction(2, 3))); // Expected output: -1, as 2/3 is removed.
        System.out.println("Index of 3/4 after removal: " + list.indexOf(new Fraction(3, 4))); // Expected output: 1, as 3/4 shifts to the left after 2/3 is removed.

        // Trying to remove an element at an invalid index to test the boundary condition
        try {
            list.remove(10); // This should throw an IndexOutOfBoundsException as the index is out of range.
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Trying to remove at an invalid index threw an exception as expected: " + e.getMessage());
        }
    }
    public Fraction remove(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);

        Fraction removedElement = array[index];
        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(array, index + 1, array, index, numMoved);
        array[--size] = null;
        return removedElement;
    }

    public void add(int index, Fraction input) {
        if (index < 0 || index > size) throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);

        if (size == array.length) {
            grow();

            System.arraycopy(array, index, array, index + 1, size - index);
            array[index] = input;
            size++;
        }
            
    }
      public int indexOf(Fraction input) {
        for (int i = 0; i < size; i++) {
            if (array[i].compare(input) == 0) {
                return i;
            }
        }
        return -1;
    }
      }

